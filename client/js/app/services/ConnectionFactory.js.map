{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","event","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEXC,gB,GAAa,I;AACbC,W,GAAQ,I;;mCAECC,iB;AAEX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;;;0CAEsB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,UAAUC,IAAV,CAAeV,MAAf,EAAuBD,OAAvB,CAAlB;;AAEAS,0BAAYG,eAAZ,GAA8B,UAACC,KAAD;AAAA,uBAAWT,kBAAkBU,aAAlB,CAAgCD,MAAME,MAAN,CAAaC,MAA7C,CAAX;AAAA,eAA9B;;AAEAP,0BAAYQ,SAAZ,GAAwB,UAACJ,KAAD,EAAW;AACjC,oBAAI,CAACX,UAAL,EAAiB;AACfA,+BAAaW,MAAME,MAAN,CAAaC,MAA1B;AACAb,0BAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAW;AAC5B,0BAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQL,UAAR;AACD,eATD;;AAWAO,0BAAYU,OAAZ,GAAsB,UAACN,KAAD,EAAW;AAC/BO,wBAAQC,GAAR,CAAYR,MAAME,MAAN,CAAaO,KAAzB;AACAd,uBAAOK,MAAME,MAAN,CAAaO,KAAb,CAAmBC,IAA1B;AACD,eAHD;AAID,aApBM,CAAP;AAqBD;;;wCAEoBrB,U,EAAY;AAC/BH,mBAAOyB,OAAP,CAAe,iBAAS;AACtB,kBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC/CzB,2BAAW0B,iBAAX,CAA6BD,KAA7B;AACD;AACDzB,yBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACD,aALD;AAMD;;;4CAEwB;AACvB,gBAAI5B,UAAJ,EAAgB;AACdC;AACAD,2BAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 3;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {  \r\n  \r\n  constructor() {\r\n    throw new Error('Não é possível criar instâncias de ConnectionFactory.')\r\n  }\r\n\r\n  static getConnection() {\r\n    return new Promise((resolve, reject) => {\r\n      let openRequest = indexedDB.open(dbName, version);\r\n\r\n      openRequest.onupgradeneeded = (event) => ConnectionFactory._createStores(event.target.result);\r\n  \r\n      openRequest.onsuccess = (event) => {\r\n        if (!connection) {\r\n          connection = event.target.result;\r\n          close = connection.close.bind(connection);\r\n          connection.close = function() {\r\n            throw new Error('Você não pode fechar diretamente a conexão.')\r\n          }\r\n        }\r\n        resolve(connection);\r\n      };\r\n  \r\n      openRequest.onerror = (event) => {\r\n        console.log(event.target.error);\r\n        reject(event.target.error.name);\r\n      };\r\n    });\r\n  }\r\n\r\n  static _createStores(connection) {\r\n    stores.forEach(store => {\r\n      if (connection.objectStoreNames.contains(store)) {\r\n        connection.deleteObjectStore(store);\r\n      }\r\n      connection.createObjectStore(store, {autoIncrement: true});\r\n    });\r\n  }\r\n\r\n  static closeConnection() {\r\n    if (connection) {\r\n      close();\r\n      connection = null;\r\n    }\r\n  }\r\n}"]}